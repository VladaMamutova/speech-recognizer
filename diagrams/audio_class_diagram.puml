@startuml

skinparam classAttributeIconSize 0

class WavHeader {
+char riff[4]
+int chunkSize
+char wave[4]
+char fmt[4]
+unsigned int   subchunk1Size
+unsigned short audioFormat
+unsigned short numOfChan
+unsigned int	  samplesPerSec
+unsigned int      bytesPerSec
+unsigned short    blockAlign
+unsigned short    bitsPerSample
+char data[4]
+unsigned int subchunk2Size
+bool isValid()
}

class WavData {
-WavHeader header
-raw_t* rawData
-double* normalizedData
-raw_t maxVal
-raw_t minVal
-uint32_t numberOfSamples
+{static} char* FILE_EXTENSION
-{static} void readData(fstream& fs, const WavHeader& wavHeader, WavData& wavFile)
+WavData(WavHeader header)
+~WavData()
+uint32_t getNumberOfSamples()
+void setNumberOfSamples(uint32_t numberOfSamples)
+raw_t getMaxVal()
+void setMaxVal(raw_t maxVal)
+raw_t getMinVal()
+void setMinVal(raw_t minVal)
+WavHeader& getHeader()
+raw_t* getRawData()
+double* getNormalizedData()
+{static} WavData* readFromFile(string& file)
+{static} bool isValidExtension(char*)
}

WavHeader -up-* WavData

class Frame {
-uint32_t id
-uint32_t start
-uint32_t end
-double rms
-double entropy
-MfccFeatures* mfcc
+Frame(uint32_t id, uint32_t start, uint32_t end)
+~Frame()
+void init(const raw_t* source, const double* sourceNormalized, uint32_t frequency)
+uint32_t getId()
+uint32_t getStart()
+uint32_t getEnd()
+double getRms()
+double getEntropy()
+MfccFeatures* getMfcc()
}

class MfccFeatures {
-double* data
+{static} size_t SIZE
+MfccFeatures()
+MfccFeatures(double* data)
+~MfccFeatures()
+size_t getSize()
+double* getData()
+ostream& operator<<(ostream& fs, const MfccFeatures& mfcc)
+istream& operator>>(istream& fs, MfccFeatures& mfcc)
+void print()
}

MfccFeatures -up-* Frame

class AudioProcessor {
-WavData* wavData
-String name
-vector<Frame*>* frames
-uint32_t samplesPerFrame
-uint32_t calculateSamplesPerFrame()
+SpeechProcessor(WavData* wavData)
+~SpeechProcessor()
+WavData* getWavData()
+void divideIntoFrames()
+vector<Frame*>* getFrames()
+void printFramesMfcc()
}

WavData -up-* AudioProcessor
Frame -up-* AudioProcessor

@enduml